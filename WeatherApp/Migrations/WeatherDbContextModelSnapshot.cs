// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherApp.Services;

namespace WeatherApp.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    partial class WeatherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeatherApp.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WeatherApp.Models.Daily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("LastUpdatedAt")
                        .HasColumnType("time");

                    b.Property<int>("MaxTemperature")
                        .HasColumnType("int");

                    b.Property<int>("MinTemperaure")
                        .HasColumnType("int");

                    b.Property<string>("Situation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("SunetTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SunriseTime")
                        .HasColumnType("time");

                    b.Property<int>("WindSpeed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Dailies");
                });

            modelBuilder.Entity("WeatherApp.Models.DailyCity", b =>
                {
                    b.Property<int>("DailyId")
                        .HasColumnType("int");

                    b.Property<int>("CityyId")
                        .HasColumnType("int");

                    b.HasKey("DailyId", "CityyId");

                    b.HasIndex("CityyId");

                    b.ToTable("DailyCities");
                });

            modelBuilder.Entity("WeatherApp.Models.Hourly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<int>("Temperature")
                        .HasColumnType("int");

                    b.Property<int>("WindSpeed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hourlies");
                });

            modelBuilder.Entity("WeatherApp.Models.HourlyCity", b =>
                {
                    b.Property<int>("HourlyId")
                        .HasColumnType("int");

                    b.Property<int>("CityyId")
                        .HasColumnType("int");

                    b.HasKey("HourlyId", "CityyId");

                    b.HasIndex("CityyId");

                    b.ToTable("HourlyCities");
                });

            modelBuilder.Entity("WeatherApp.Models.DailyCity", b =>
                {
                    b.HasOne("WeatherApp.Models.City", "City")
                        .WithMany("DailyCities")
                        .HasForeignKey("CityyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherApp.Models.Daily", "Daily")
                        .WithMany("DailyCities")
                        .HasForeignKey("DailyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Daily");
                });

            modelBuilder.Entity("WeatherApp.Models.HourlyCity", b =>
                {
                    b.HasOne("WeatherApp.Models.City", "City")
                        .WithMany("HourlyCities")
                        .HasForeignKey("CityyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherApp.Models.Hourly", "Hourly")
                        .WithMany("HourlyCities")
                        .HasForeignKey("HourlyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Hourly");
                });

            modelBuilder.Entity("WeatherApp.Models.City", b =>
                {
                    b.Navigation("DailyCities");

                    b.Navigation("HourlyCities");
                });

            modelBuilder.Entity("WeatherApp.Models.Daily", b =>
                {
                    b.Navigation("DailyCities");
                });

            modelBuilder.Entity("WeatherApp.Models.Hourly", b =>
                {
                    b.Navigation("HourlyCities");
                });
#pragma warning restore 612, 618
        }
    }
}
